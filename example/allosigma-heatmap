#!/usr/bin/env python3

# allosigma-classify
# Copyright (C) 2024 Matteo Tiberti & Kristine Degn, Cancer structural biology,
# Danish cancer society research center

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import pandas as pd
import numpy as np
import argparse
from zipfile import ZipFile
from os.path import basename
import json
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable, axes_size


def parse_positions(pos_str):
    if pos_str is None:
        return None

    ranges = [range(int(y[0]), int(y[1])+1) \
        for y in [(x.split('-') + [x])[:2] \
            for x in pos_str.split(',')]]
    return sorted(list(set([item for sublist in ranges for item in sublist])))

def three_to_one(amino_acid):
    amino_acid = amino_acid.upper()
    amino_acid_mapping = {
        'ASP': 'D', 'VAL': 'V', 'ALA': 'A', 'MET': 'M', 'ASN': 'N',
        'PHE': 'F', 'GLY': 'G', 'LEU': 'L', 'ILE': 'I', 'THR': 'T',
        'PRO': 'P', 'CYS': 'C', 'SER': 'S', 'ARG': 'R', 'TYR': 'Y',
        'GLN': 'Q', 'LYS': 'K', 'TRP': 'W', 'GLU': 'E', 'HIS': 'H'}
    return amino_acid_mapping.get(amino_acid, None)

#def allosigma_to_position(pos, chains):
def allosigma_to_position(pos):
    return f"{three_to_one(pos[0:3].upper())}{pos.split('.')[0][3:]}"

def allosigma_to_resnums(pos):
    return int(f"{pos.split('.')[0][3:]}")


def calculate_dh_from_dg(dg_matrix, fill_value=0):
    """
    Calculate ΔH from ΔG using mean-centering across rows.
    Parameters:
        dg_matrix (np.ndarray): Input ΔG matrix.
        fill_value (float): Value used to replace NaNs after centering.
    Returns:
        np.ndarray: Centered ΔH matrix.
    """
    row_means = np.nanmean(dg_matrix, axis=1, keepdims=True)
    dh_matrix = dg_matrix - row_means
    dh_matrix = np.where(np.isnan(dh_matrix), fill_value, dh_matrix)
    return dh_matrix

def heatmap_labels(mutations, labels, classification):
    this_muts = mutations[mutations['allosigma-mode'] == classification]
    this_muts['mutation'] = this_muts['wt_residue'] + this_muts['position'].astype(str) + this_muts['mutated_residue']
    this_muts = this_muts.groupby('mutid').mutation.agg([('mutation', ' '.join)])

    return this_muts.loc[labels]['mutation'].tolist()
    #return this_muts.loc['labels'].mutation

# splice_data adapted from MutateX's ddg2heatmap script
def splice_data(data, labels_x, labels_y, sv_x, sv_y):

    out = []

    if data.shape[1] <= sv_x and data.shape[0] <= sv_y:
        return [[[data, labels_x, labels_y]]]

    nsplice_x = data.shape[1] // int(sv_x)
    rest_x =    data.shape[1] %  int(sv_x)

    if rest_x != 0:
        nsplice_x += 1

    nsplice_y = data.shape[0] // int(sv_y)
    rest_y =    data.shape[0] %  int(sv_y)

    if rest_y != 0:
        nsplice_y += 1

    for i in range(nsplice_x):
        this_x_out = []
        for j in range(nsplice_y):
            this_x_out.append([
                data[j*sv_y:(j+1)*sv_y, i*sv_x:(i+1)*sv_x],
                labels_x[i*sv_x:(i+1)*sv_x],
                labels_y[j*sv_y:(j+1)*sv_y]])
        out.append(this_x_out)

    return out

# plot_matrix modified from MutateX's ddg2heatmap script
def plot_matrix(ax, mat, xlabels, ylabels, cmap, title=None, vmin=None, vmax=None, transpose=False, fontsize=8, heatmap_label=""):
    if transpose:
        mat = mat.T
        xlabels, ylabels = ylabels, xlabels
    
    im = ax.imshow(mat, interpolation="nearest", cmap=cmap, vmin=vmin, vmax=vmax)
    
    if title is None:
        title = ""
    
    ax.set_xticks(np.arange(0, mat.shape[1]))
    ax.set_yticks(np.arange(0, mat.shape[0]))
    ax.set_xticklabels(xlabels, rotation=90, fontsize=fontsize)
    ax.set_yticklabels(ylabels, rotation=0, fontsize=fontsize)
    
    divider = make_axes_locatable(ax)
    width = axes_size.AxesY(ax, aspect=1./10)
    pad = axes_size.Fraction(1.5, width)
    cax = divider.append_axes("right", size=width, pad=pad)
    cb = plt.colorbar(im, cax=cax)
    cb.set_label(heatmap_label)
    
    ax.set_title(title)
    ax.autoscale(False)

matplotlib.rcParams['font.family'] = 'sans-serif'
matplotlib.rcParams['font.sans-serif'] = [ 'Arial' ]
matplotlib.rcParams['axes.unicode_minus'] = False

parser = argparse.ArgumentParser()

parser.add_argument('allosigma_zip', help="zip session file downloaded from AlloSigma")
parser.add_argument('mutations_csv', help="csv filtere containing mutations classified as UP and DOWN, as per the output of allosigma-classify")
parser.add_argument('-p', '--plot', action='store_true', help="add flag if you are interested in plotting heatmaps.")
parser.add_argument('-r', '--response-positions', dest="response_positions", help="residues to be considered for the allosteric response (i.e. Dg values), defaults to 'all'", default="all")
parser.add_argument('-x', '--svx', dest='sv_x', help='how many columns to keep for each heatmap (default: 50)', default=50, type=int)
parser.add_argument('-y', '--svy', dest='sv_y', help='how many rows to keep for each heatmap (default: 50)', default=50, type=int)
parser.add_argument('-f', '--font-size', dest='fs', help='font size (default: 8)', default=8, type=float)
parser.add_argument('-c', '--color-map', dest='cmap', help='color map to be used in plotting (default: coolwarm', default='coolwarm', type=str)
parser.add_argument('-t', '--transpose', dest='transpose', help='transpose plotted matrices', default=False, action='store_true')
parser.add_argument('-m', '--mode', default='dg', choices=['dg', 'dh'], help='choose whether to plot/calculate dH or use default dG')

args = parser.parse_args()

label_symbol = 'g' if args.mode == 'dg' else 'H'
prefix = 'dg' if args.mode == 'dg' else 'dh'


# read mutations file
mutations = pd.read_csv(args.mutations_csv, sep='\t', header=0)

# read allosigma session file
zip = ZipFile(args.allosigma_zip)

# find the file name of the PDB that has been used
filenames = [ f.filename for f in zip.filelist ]
# test/WorkFiles/MaskedPDB/
pdbs = list(filter(lambda x: x.startswith('WorkFiles/MaskedPDB/') and x.endswith('.masked.pdb'), filenames))

if len(pdbs) == 0:
    print("ERROR: expected PDB file not found in data; Exiting...")
    exit(1)
elif len(pdbs) > 1:
    print("ERROR: more than one PDB file found in data; Exiting...")
    exit(1)

pdb_basename = basename(pdbs[0])[:-11]

# load contents of the allosigma session file
try:
    with zip.open('WorkFiles/JSONObjs/chainIDmap.json') as fh:
        chains = json.load(fh)

    with zip.open(f'WorkFiles/JSONObjs/{pdb_basename}_responselist.json') as fh:
        response_list = json.load(fh)

    with zip.open(f'WorkFiles/JSONObjs/{pdb_basename}_mutationlist.json') as fh:
        mutation_list = json.load(fh)

    with zip.open(f'WorkFiles/JSONObjs/{pdb_basename}_ASM_DOWN.json') as fh:
        dg_down = json.load(fh)

    with zip.open(f'WorkFiles/JSONObjs/{pdb_basename}_ASM_UP.json') as fh:
        dg_up = json.load(fh)
except KeyError:
    print("ERROR: the AlloSigMA sessione file doesn't contain expected data. Exiting...")
    exit(1)

# translate mutation and response lists to a formt we like
mutation_list = [ allosigma_to_position(m) for m in mutation_list ]
response_list = [ allosigma_to_position(m) for m in response_list ]

# filter reponse positions according to what supplied by the user
if args.response_positions == "all":
    response_positions = response_list
else:
    parsed_positions = parse_positions(args.response_positions)
    response_positions = list(filter(lambda x: int(x[1:]) in parsed_positions, response_list))

# create dataframes with data from the UP and DOWN response matrices
dg_up   = pd.DataFrame(np.array(dg_up),
                    index   = mutation_list,
                    columns = response_list)
dg_down = pd.DataFrame(np.array(dg_down), 
                    index   = mutation_list, 
                    columns = response_list)

# discard mutations that are neither UP or DOWN in the mutation file
mutations = mutations[ ~ mutations['allosigma-mode'].isna() ]
#mutations['mutid'] = mutations.apply(lambda x, chain: f"{chain}-{x['wt_residue']}{x['position']}", chain='A', axis=1)

# add mutid column with our identifier (e.g. C306)
mutations['mutid'] = mutations.apply(lambda x: f"{x['wt_residue']}{x['position']}", axis=1)

if mutations.empty:
    print("Warning: No valid mutations found after filtering.")
    exit(1)

# isolate DOWN and UP mutations
mutations_up   = mutations[ mutations['allosigma-mode'] == 'UP'   ]
mutations_down = mutations[ mutations['allosigma-mode'] == 'DOWN' ]

# filter rows keeping only those corresponding to mutations
dg_up   = dg_up[   dg_up.index.isin(  mutations_up['mutid'])]
dg_down = dg_down[ dg_down.index.isin(mutations_down['mutid'])]

# filter columns keeping only those corresponding to desired response positions
dg_up  =  dg_up.filter(response_positions, axis=1)
dg_down = dg_down.filter(response_positions, axis=1)

if dg_up.empty or dg_down.empty:
    print("Warning: No data to plot. Check filters.")
    exit()

# turn mutation labels from positions to lists of mutation
dg_up['mutations']   = heatmap_labels(mutations_up, dg_up.index.to_list(), 'UP')
dg_down['mutations'] = heatmap_labels(mutations_down, dg_down.index.to_list(), 'DOWN')
dg_up   = dg_up.set_index('mutations')
dg_down = dg_down.set_index('mutations')

# back to numpy arrays after filtering
dg_up_ar = dg_up.to_numpy()
dg_down_ar = dg_down.to_numpy()

if args.mode == 'dh':
        dh_up_ar = calculate_dh_from_dg(dg_up_ar)
        dh_down_ar = calculate_dh_from_dg(dg_down_ar)
        dh_up = pd.DataFrame(dh_up_ar, index=dg_up.index, columns=dg_up.columns)
        dh_down = pd.DataFrame(dh_down_ar, index=dg_down.index, columns=dg_down.columns)

plot_up_ar = dg_up_ar if args.mode == 'dg' else dh_up_ar
plot_down_ar = dg_down_ar if args.mode == 'dg' else dh_down_ar

# splice data into blocks for plotting and plot
spliced_data = splice_data(plot_up_ar, 
                           dg_up.columns.tolist(),
                           dg_up.index.tolist(), 
                           args.sv_x, args.sv_y)

# workaround for minus in colorbar not showing
heatmap_lab_down = r'$\Delta{}' + label_symbol + r'^{UP}$ (kcal/mol)'
if args.plot: 
    for i in range(len(spliced_data)):
        for j in range(len(spliced_data[i])):
            fig, ax = plt.subplots()
            plot_matrix(ax=ax, mat=spliced_data[i][j][0], xlabels=spliced_data[i][j][1], ylabels=spliced_data[i][j][2],
                        cmap=args.cmap, title="UP mutations", vmin=np.min(dg_up_ar), vmax=np.max(dg_up_ar),
                        fontsize=args.fs, heatmap_label=heatmap_lab_down, transpose=args.transpose)
            if args.transpose:
                plt.savefig(f"{prefix}_UP_mutations_x{j+1}_y{i+1}.pdf")
            else:
                plt.savefig(f"{prefix}_UP_mutations_x{i+1}_y{j+1}.pdf")
            plt.clf()

spliced_data = splice_data(plot_down_ar, 
                            dg_down.columns.tolist(),
                            dg_down.index.tolist(),
                            args.sv_x, args.sv_y)

heatmap_lab_down = r'$\Delta{}' + label_symbol + r'^{DOWN}$ (kcal/mol)'
if args.plot: 
    for i in range(len(spliced_data)):
        for j in range(len(spliced_data[i])):
            fig, ax = plt.subplots()
            plot_matrix(ax=ax, mat=spliced_data[i][j][0], xlabels=spliced_data[i][j][1], ylabels=spliced_data[i][j][2],
                        cmap=args.cmap, title="DOWN mutations", vmin=np.min(dg_up_ar), vmax=np.max(dg_up_ar),
                        fontsize=args.fs, heatmap_label=heatmap_lab_down, transpose=args.transpose)
            if args.transpose:
                plt.savefig(f"{prefix}_DOWN_mutations_x{i+1}_y{j+1}.pdf")
            else:
                plt.savefig(f"{prefix}_DOWN_mutations_x{j+1}_y{i+1}.pdf")
            plt.clf()

# transpose dataframes if requested
if args.transpose:
    if args.mode=='dg':
            dg_up = dg_up.transpose()
            dg_down = dg_down.transpose()
    else:
        dh_up = dh_up.transpose()
        dh_down = dh_down.transpose()

# write csv files
    if args.mode == 'dg':
        dg_up.to_csv('up_mutations.tsv', sep='\t')
        dg_down.to_csv('down_mutations.tsv', sep='\t')
    else:
        dh_up.to_csv('dh_up_mutations.tsv', sep='\t')
        dh_down.to_csv('dh_down_mutations.tsv', sep='\t')
